BEGIN	{
NFS=""

prev_col1=""
prev_col2=""
prev_col3=""
prev_col4=""
prev_col5=""
prev_col6=""

column_name ="";
str=0;
start=0;
startCount=0;
print "--File\tOwner" 
prev_startCount =0;
init =1;

print "--  tomg.scr generated version 1.2"
print "--  All Copyright are Reserved (c) Heaerie Global Solutions Ltd.Vellore"
print "  set echo on"
print "  set feedback  on"
print "  set serveroutput  on"
print "  spool ora.log"
print "  alter session set current_schema = c##DBHSP;"

}
{ 
sqlCommand=$0
col1=$1 
col2=$2 
col3=$3 
col4=$4 
col5=$5 
col6=$6 
col7=$7 

	if ( col1 == "DROP" ||  col1 == "SHOW" || col1 == "ENGINE" || col1 == "DEFAULT") 
	{

	str=0
	start=0
	startCount=0;
	}	

	#printf("\n-- col1: [%s]", col1);
	if ( col1 == "CREATE"  && col2 == "TABLE" ) 
	{

	str=1
	start=1
	startCount=0;
			 gsub(/[``]/,"",col6)
		     otherStmt=gsub(/[.]/,"_",col6)
			 
			 if (otherStmt>0)
			{
				gsub(/DBHSP_/,"C##DBHSP.",col6);
			}
		
			if ( 	init == 1 )
			{
			if ( prev_table_name != "" ) 
			{
			printf ( "\n  );\n\r\r" , col6 );
			#printf ( "\n\n  create table %s (" , prev_table_name, prev_table_name, prev_table_name );
			#printf ( " \n module.exports.%s_Model = %s_Model; " , prev_table_name , prev_table_name ) ;
			#printf ( " \n  )\n \/  --end %s " , prev_table_name  ) ;
			}
			printf ( "\n\n drop  table %s ; " , col6 );
			printf ( "\n\n create table %s ( " , col6 );
			prev_table_name = col6;
			}
			else
			{
			printf ( "\n create table %s ( " , col6 );
			}
				init =1
	}
	else if ( col1 == "INSERT"   ) 
	{
			insertStmt=gsub(/[``]/,"",sqlCommand)
			
			insertStmt=gsub(/[']/,"~",sqlCommand);
			insertStmt=gsub("DBHSP","C##DBHSP",sqlCommand);
			insertStmt=gsub("~now()","sysdate",sqlCommand);
			#printf("\n sqlCommand = for now [%s] ",sqlCommand);
			insertStmt=gsub("sysdate\\(\\)~","sysdate",sqlCommand);
			insertStmt=gsub(/[~]/,"'",sqlCommand);
		printf("\n\n --INSERT \n %s " ,sqlCommand);
		#start=0;
		str=1;
	}	
	else if ( col1 == "PRIMARY"   || col1== "FOREIGN"  			|| col1== "CONSTRAINT"  			|| col1==  "REFERENCES") 
	{
			otherStmt=gsub(/[``]/,"",sqlCommand);
			otherStmt=gsub(/[\.]/,"_",sqlCommand);
			
			if (otherStmt>0)
			{
				gsub(/[DBHSP]/,"C##DBHSP",sqlCommand);
			}
		#printf("\n\n -- PRIMARY \n %s " ,sqlCommand);
		#start=0;
		
		str=1;
	}	
	#PRIMARY
	else
	{
	str =0 
	}

#	print str , col1 , col2 , col3 , col4 , col5

	if ( start = 1 )
	{

	
	if ( str == 0 )
	{
		column_name = col1
		column_type = col2
   		
		column_dflt = col3
		column_reqd = col3
		column_key  = col4
		column_uniq  = col4
#		split(column_type, column_type_ , "(" )
		#gsub(/[(0-9)]/,"",column_type) 
			
			
		rslt=gsub(/[``]/,"",column_name) 

		#print("\n rslt %s", rslt);
		      gsub(/[,]/,"",col4) 		
		      gsub(/[,]/,"",col5) 


#precision, scale
#precision, scale

#split("cul-de-sac", a, "-")		
split(column_type, precisionSacleB, "(")	

#printf(" precisionSacleB 2 [%s] ", precisionSacleB[2]);

split(precisionSacleB[2], precisionSacle, ")")	

#printf("\n 0= [%s] 2= [%s]  %d", precisionSacle[0],precisionSacle[1] , length(precisionSacle[1] ));

if( length(precisionSacle[1] ) > 0)
{
#printf("\n in L001 [%s] ", column_type_precisionScale);
column_type_precisionScale= sprintf ( "(%s)" , precisionSacle[1]);
}
else
{
#printf("\n in L002 [%s] ", precisionSacle[1]);

column_type_precisionScale ="";
}


	gsub(/[(0-9)]/,"",column_type) 	
	gsub(/[,]/,"",column_type) 	
		
		#printf("-- column_type  [%s] ",column_type);
		switch ( column_type )
		{
		case  "VARCHAR":
			column_type= "VARCHAR"
			
			break
		case  "DATETIME":
			column_type= "TIMESTAMP"
			
			break
		case  "INT":
			column_type= "NUMBER"
			break
		case  "DATE":
			column_type= "DATE"
			break
		case  "DOUBLE":
			column_type= "NUMBER"
			break
		default :
			column_type= "VARCHAR"
		}
		
		if  (column_type == "VARCHAR" &&  length(column_type_precisionScale) < 0 )
			{
			
				column_type_precisionScale="(60)";
			}
			
		if ( col3 == "NOT" &&  col4 == "NULL" )
		{
			
			column_reqd = "not null"
			column_dflt="";			
			##if ( col5 == "DEFAULT" &&  col6 == "NULL" )
			#{
			#	
			#	column_dflt = "''"		
			#}
			#else
			#{
			#	
			#		if (col6 == "")
			#		{
			#		column_dflt =	"0";
			#		}
			#		else
			#		{
			#		column_dflt =	col6
			#		}
			#}
		}
		else
		{
			column_reqd = ""
			if ( col4 == "DEFAULT" &&  col5 == "NULL" )
			{
				
				column_dflt = ""		
			}
			else
			{
				if ( col5  != "" ) #need to fix on old
				{
				column_dflt =sprintf("default %s",col5);	
				}
				else
				{
					column_dflt = "";
				}
			}
		}
	
	
		if ( rslt != 0 ) 
		{

			if (startCount == 0 )
			{

				comma =" "
			}
			else
			{
				comma =","
			}
		
	 	if (	column_dflt == "" ) 
		{
			column_dflt = "" 
		}
		#column_dflt
		gsub(/[,)]/,"",column_dflt) ;
			#printf ("\n %s  %s: {type: %s, unique: %s, required: %s, default: %s  }" ,comma, column_name, column_type, column_reqd,column_reqd, column_dflt );
			printf ("\n %s  %s  %s %s  %s  %s " ,comma, column_name, column_type,column_type_precisionScale, column_reqd, column_dflt );
			#printf ("\n %s  \t\t%s\t\t%s\t\t%s\t\t%s\t\t default\t\t%s }" ,comma, column_name, column_type,column_type_precisionScale, column_reqd, column_dflt );
	startCount= startCount + 1
		}
	}

	}
	
	
	

prev_col1=col1 
prev_col2=col2 
prev_col3=col3 
prev_col4=col4 
prev_col5=col5 
prev_col6=col6 
prev_startCount= startCount

}
END	{

			if ( prev_table_name != "" ) 
			{
			printf ( "\n  );" , col6 );
			#printf ( " create table %s " , prev_table_name, prev_table_name, prev_table_name );
			#printf ( " \n module.exports.%s_Model = %s_Model; " , prev_table_name , prev_table_name ) ;
			}
print "\n spool off"
print "\n spool off"
 print "--done"} 
